<?php
use \Aws\Sns\SnsClient as SNSClient;

/**
 * Class uk_co_compucorp_amazonsns implements SMS Provider methods required to
 * validate and send SMS messages.
 */
class uk_co_compucorp_amazonsns extends CRM_SMS_Provider {

  /**
   * Unique Instance of uk_co_compucorp_amazonsns to be used on SMS sending
   * operations.
   *
   * @var object
   */
  static private $_singleton;

  /**
   * Default API URL, moot in the case of this extension, as actual URL is
   * determined by AWS SDK, but required by CiviCRM.
   *
   * @var string
   */
  public $_apiURL = 'https://aws.amazon.com';

  /**
   * AWS SDK Client to send SMS messages via Amazon SNS.
   *
   * @var \Aws\Sns\SnsClient
   */
  private $snsClient;

  /**
   * Sender ID to be used on SMS messages. Should be an alphanumeric string,
   * with at least one letter.
   *
   * @var string
   */
  private $senderID;

  /**
   * Maximum number of characters in an SMS message.
   */
  const MAX_SMS_CHAR = 160;

  /**
   * uk_co_compucorp_amazonsns constructor.
   *
   * @param array $providerParameters
   */
  public function __construct($providerParameters) {
    if ($this->validateProviderParameters($providerParameters)) {
      $params = array(
        'credentials' => array(
          'key' => $providerParameters['username'],
          'secret' => $providerParameters['password'],
        ),
        'region' => $providerParameters['api_params']['region'],
        'version' => $providerParameters['api_params']['version'],
      );
      $this->snsClient = new SNSClient($params);
    }

    if (!empty($providerParameters['api_params']['SenderID'])) {
      $this->senderID = $providerParameters['api_params']['SenderID'];
    }
  }

  /**
   * Validates if all reuired provider parameters are set.
   *
   * @param array $parameters
   *
   * @return bool
   *   True if all required parameters are given, false otherwise
   */
  private function validateProviderParameters($parameters) {

    switch (true) {
      case empty($parameters['username']):
      case empty($parameters['password']):
      case empty($parameters['api_params']['region']):
      case empty($parameters['api_params']['version']):
        $valid = FALSE;
        break;

      default:
        $valid = TRUE;
    }

    return $valid;
  }

  /**
   * Creates unique instance of the class to be used on all SMS opertions.
   *
   * @param array $providerParams
   * @param bool $force
   *
   * @return object|\uk_co_compucorp_amazonsns
   */
  public static function &singleton($providerParams = array(), $force = FALSE) {
    if (!isset(self::$_singleton) || $force) {
      $provider = array();

      $providerID = CRM_Utils_Array::value('provider_id', $providerParams);
      if ($providerID) {
        $provider = CRM_SMS_BAO_Provider::getProviderInfo($providerID);
      }

      self::$_singleton = new uk_co_compucorp_amazonsns($provider);
    }

    return self::$_singleton;
  }

  /**
   * Sends an SMS message to the given phone number through Amazon SNS.
   *
   * @param array $recipients
   *   Phone number to where the SMS messge will be sent
   * @param string $header
   *   Headers for SMS message to be sent
   * @param string $message
   *   Content of SMS message to be sent
   * @param null $jobID
   *   ID of mailing job to which the SMS message is associated, if sent as part
   *   of a batch SMS job.
   * @param null $userID
   *   ID of user that is sending the SMS message, if doing a single SMS sending
   *
   * @return PEAR_Error|int
   *   Pear error object if an error is found, otherwise the message ID
   *   generated by Amazon SNS
   */
  public function send($recipients, $header, $message, $jobID = NULL, $userID = NULL) {

    if (!$this->validatePhoneNumber($recipients)) {
      return PEAR::raiseError(
        'The phone number ' . $recipients . ' does not comply with the E.164 format! SMS sending not possible. <a href="http://docs.aws.amazon.com/sns/latest/dg/sms_publish-to-phone.html" target="_blank">More information...</a>',
        0,
        PEAR_ERROR_RETURN
      );
    }

    $messageParams = $this->buildMessageParameters($jobID);
    $messageParams['Message'] = $message;
    $messageParams['PhoneNumber'] = $recipients;

    try {
      $result = $this->snsClient->publish($messageParams);
      $messageID = $result->get('MessageId');
      $this->createActivity($messageID, $message, $header, $jobID, $userID);
    } catch(Aws\Sns\Exception\SnsException $e) {
      return PEAR::raiseError(
        'Error Sending SMS through Amazon SNS [' . $e->getAwsErrorCode() . ']' . ':' . ' - ' . $e->getAwsErrorMessage(),
        $e->getAwsErrorCode(),
        PEAR_ERROR_RETURN
      );
    }

    return $messageID;
  }

  private function buildMessageParameters($jobID) {
    $messageParams = array();

    if (!empty($this->senderID)) {
      $messageParams['SenderID'] = $this->senderID;
    }

    if (!empty($jobID)) {
      $mailingData = civicrm_api3('MailingJob', 'get', array(
        'id' => $jobID,
        'api.Mailing.getvalue' => array(
          'id' => '$value.mailing_id',
          'return' => 'template_options',
        ),
      ));
      $messageParams['SMSType'] = $mailingData['values'][$jobID]['api.Mailing.getvalue']['sms_type'] ?: 'Promotional';
    } else {
      $messageParams['SMSType'] = CRM_Utils_Request::retrieve('sms_type', 'String') ?: 'Promotional';
    }

    $messageParams['MessageAttributes'] = array(
      'AWS.SNS.SMS.SenderID' => array(
        'DataType' => 'String',
        'StringValue' => $this->senderID
      ),
      'AWS.SNS.SMS.SMSType' => array(
        'DataType'    => 'String',
        'StringValue' => $messageParams['SMSType']
      )
    );

    return $messageParams;
  }

  /**
   * Validate given pone number's format.
   *
   * @param $phone
   *
   * @return bool
   *   True if valid, false otherwise.
   */
  private function validatePhoneNumber($phone) {
    return CRM_Amazonsns_SMS_PhoneValidator::validatePhoneNumber($phone);
  }
}
